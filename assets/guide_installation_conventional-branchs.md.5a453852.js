import{_ as a,c as t,o as e,O as i}from"./chunks/framework.389d77d5.js";const m=JSON.parse('{"title":"Ведення гілок","description":"","frontmatter":{},"headers":[],"relativePath":"guide/installation/conventional-branchs.md"}'),o={name:"guide/installation/conventional-branchs.md"},n=i('<h1 id="ведення-гілок" tabindex="-1">Ведення гілок <a class="header-anchor" href="#ведення-гілок" aria-label="Permalink to &quot;Ведення гілок&quot;">​</a></h1><p>Git – це розподілена система управління версіями, яка дозволяє розробникам працювати над проектами спільно та ефективно. Одним із ключових аспектів Git є гілки, які дозволяють розробляти та тестувати нові функції незалежно від основного коду.</p><h2 id="гілки" tabindex="-1">Гілки <a class="header-anchor" href="#гілки" aria-label="Permalink to &quot;Гілки&quot;">​</a></h2><p>Для даного проекту буде наступне налаштування розгалужень git</p><ul><li><p><strong>main</strong> - головна продакшен гілка, що містить релізні версії продукту.</p></li><li><p><strong>develop</strong> – гілка для розробки, яка містить код для розробки продукту</p></li><li><p><strong>hotfix</strong> - гілка для виправлення помилок та багів</p></li></ul><h2 id="правила" tabindex="-1">Правила <a class="header-anchor" href="#правила" aria-label="Permalink to &quot;Правила&quot;">​</a></h2><ol><li><p>Будь-який коміт повинен містити працездатний код, який може збиратися без помилок.</p></li><li><p>Будь-який змінений файл, перед тим, як буде додано до комміту, обов&#39;язково повинен бути відформатованим.</p></li><li><p>Злиття develop гілки з main може бути тільки в кінці скрам ітерації і тільки тим лідом.</p></li><li><p>Гілка hotfix використовується лише для виправлення знайдених багів. Розробник переключається на гілку, виправляє знайдених баг, робить пуш гілки репозиторій. Потім тих лід робить злиття.</p></li></ol>',7),l=[n];function r(s,c,p,_,d,h){return e(),t("div",null,l)}const f=a(o,[["render",r]]);export{m as __pageData,f as default};
