import{_ as a,c as s,o as e,O as t}from"./chunks/framework.389d77d5.js";const m=JSON.parse('{"title":"Правила роботи Git","description":"","frontmatter":{},"headers":[],"relativePath":"guide/installation/git.md"}'),l={name:"guide/installation/git.md"},p=t(`<h1 id="правила-роботи-git" tabindex="-1">Правила роботи Git <a class="header-anchor" href="#правила-роботи-git" aria-label="Permalink to &quot;Правила роботи Git&quot;">​</a></h1><p>Для того, щоб працювати в команді над загальним проектом, просто необхідно впевнено володіти git. Без цієї навички сенс будь-якого навчання зводиться до 0. Тут представлена невелика збірка основних команд:</p><h2 id="поточнии-статус" tabindex="-1">Поточний статус <a class="header-anchor" href="#поточнии-статус" aria-label="Permalink to &quot;Поточний статус&quot;">​</a></h2><p>Перед тим, як щось робити з контролем версій, необхідно дізнатися про його стан. Для цього потрібно виконати команду:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre></div><p>Ця команда виводить інформацію про поточний статус контролю версій (звичайний, конфліктна ситуація, в процесі rebase, в процесі merge тощо) що в проекті змінено, що додано, на якій гілці ми працюємо, скільки і які зміни можуть бути закомічені тощо.</p><h2 id="переключиться-на-гілку" tabindex="-1">Переключиться на гілку <a class="header-anchor" href="#переключиться-на-гілку" aria-label="Permalink to &quot;Переключиться на гілку&quot;">​</a></h2><p>Перед тим, як нам щось робити, необхідно переконатись, що ми знаходимося на правильній гілці. У команді вище ми можемо дізнатися де ми знаходимося, і якщо нам потрібно переключити гілку, то виконати команду:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span></code></pre></div><p>Ця команда перемикає нас на гілку &quot;develop&quot;.</p><h2 id="отримати-зміни" tabindex="-1">Отримати зміни <a class="header-anchor" href="#отримати-зміни" aria-label="Permalink to &quot;Отримати зміни&quot;">​</a></h2><p>Оскільки ми працюємо у команді, інші учасники можуть заливати свої зміни до загального репозиторію. Щоб їх отримати, достатньо виконати команду:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git pull</span></span></code></pre></div><p>Вона буквально каже нам синхронізувати наш локальний репозиторій із віддаленим.</p><p>Проте, команда вище не може допомогти у ситуації, коли і у віддаленому та на локальному репозиторіях вже є комміти. Щоб не втратити наші локальні зміни та залити зміни команди, необхідно виконати команду:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git pull --rebase</span></span></code></pre></div><p>Ця команда виконує перебазування, тобто вставляє наші зміни поверх змін у віддаленому репозиторії. За допомогою неї, ми можемо без болю синхронізуватись і якщо немає жодних конфліктів, запушити наші зміни у віддалений репозиторій.</p><h2 id="додавання-фаилів" tabindex="-1">Додавання файлів <a class="header-anchor" href="#додавання-фаилів" aria-label="Permalink to &quot;Додавання файлів&quot;">​</a></h2><p>Після того, як ми залили зміни до локального репозиторію, потім змінили якісь файли, нам необхідно додати їх у контроль версій. Робиться це такою командою:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add .</span></span></code></pre></div><p>Ця команда додає всі файли для контролю версій. Щоб додати окремий файл або папку, потрібно вказати до неї шлях:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add src/some/path/CppClass.cpp</span></span>
<span class="line"><span style="color:#A6ACCD;">git add src/some/path/CppClass.h</span></span></code></pre></div><p>Можна використовувати регулярні вирази. Наприклад, щоб додати два файли вище за одну команду, можна написати:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git add src/some/path/CppClass.*</span></span></code></pre></div><h2 id="створити-коміт" tabindex="-1">Створити коміт <a class="header-anchor" href="#створити-коміт" aria-label="Permalink to &quot;Створити коміт&quot;">​</a></h2><p>Як тільки ми додали файли в контроль версій, щоб зафіксувати зміни, необхідно створити коміт:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit -m &quot;feat: some changes&quot;</span></span></code></pre></div><p>В даному випадку ми створили коміт з повідомленням &quot;feat: some changes&quot;. Це найшвидший спосіб створити коротке повідомлення. Зазвичай цього достатньо, але якщо в коміті потрібно написати великий текст, то потрібно прибрати прапор -m і просто написати:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit</span></span></code></pre></div><p>З&#39;явиться текстовий редактор (у git bash або якийсь візуальний) який попросить ввести текст комміта, де перший рядок - заголовок, решта його тіла.</p><p>Більше про правила ведення коммітів можна прочитати <a href="./conventional-commits.html">тут</a>.</p><h2 id="надіслати-зміни" tabindex="-1">Надіслати зміни <a class="header-anchor" href="#надіслати-зміни" aria-label="Permalink to &quot;Надіслати зміни&quot;">​</a></h2><p>Як тільки ми перестали писати код, додали потрібні файли, створили коміт, ці зміни необхідно відправити у віддалений репозиторій. Для цього скористається командою:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push</span></span></code></pre></div><p>Якщо ж ми зіткнемося з конфліктом, коли у віддаленому репозиторії вже є зміни, слід повернутись до пункту вище &quot;git pull --rebase&quot;.</p><div class="info custom-block"><p class="custom-block-title">Більше інформації</p><p>Це лише короткий список найбільш базових команд, які необхідно знати щоб правильно працювати в команді. У консольній версії git команд з керування історією набагато і набагато більше.</p><p>Також для контролю версій створено спеціальні GUI. Це програми, що графічно керують контролем версій. До них відносяться GitHub Desktop, SmartGit, GitKraken та <a href="https://git-scm.com/downloads/guis" target="_blank" rel="noreferrer">інші</a>.</p></div>`,36),n=[p];function o(i,c,r,d,h,g){return e(),s("div",null,n)}const C=a(l,[["render",o]]);export{m as __pageData,C as default};
