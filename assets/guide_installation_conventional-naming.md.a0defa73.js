import{_ as a,c as s,o as n,O as l}from"./chunks/framework.389d77d5.js";const g=JSON.parse('{"title":"Правила найменування","description":"","frontmatter":{},"headers":[],"relativePath":"guide/installation/conventional-naming.md"}'),e={name:"guide/installation/conventional-naming.md"},p=l(`<h1 id="правила-наименування" tabindex="-1">Правила найменування <a class="header-anchor" href="#правила-наименування" aria-label="Permalink to &quot;Правила найменування&quot;">​</a></h1><p>Імена в програмі - це ключ до читабельності програми. Якщо ім&#39;я в програмі доречне, то все узгоджується між собою, взаємозв&#39;язки зрозумілі, значення виводиться. C++ використовує CamelCase як практику для написання імен методів, змінних, класів, пакетів та констант.</p><div class="info custom-block"><p class="custom-block-title">CamelCase</p><p><strong>CamelCase</strong> - це угода про імена, де ім&#39;я формується з декількох слів, які об&#39;єднуються в одне слово, причому перша буква кожного слова пишеться з великої літери.</p></div><p>Нижче наведені угоди про іменування в програмуванні на C++. Їх необхідно дотримуватися під час написання коду на C++ для гарного супроводу, читабельності та розуміння програми.</p><h2 id="тип-1-імена-класів-та-атрибутів-класів" tabindex="-1">Тип 1: Імена класів та атрибутів класів <a class="header-anchor" href="#тип-1-імена-класів-та-атрибутів-класів" aria-label="Permalink to &quot;Тип 1: Імена класів та атрибутів класів&quot;">​</a></h2><ul><li>Ім&#39;я класу повинно бути іменником.</li><li>Для розділення слів використовуйте великі літери, а для решти слів - малі.</li><li>Перший символ у назві класу повинен бути у верхньому регістрі.</li><li>У назві класу не допускаються символи підкреслення (&#39;_&#39;).</li></ul><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">class PerimeterRectangle {}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">class FingerprintScanner {}</span></span></code></pre></div><ul><li>До імені приватного атрибуту у класі слід додавати символ &#39;m&#39;.</li><li>Після додавання символу &#39;m&#39; для імені будуть виконуватися ті самі правила, що й для імені класу.</li><li>Символ &#39;m&#39; також ставиться перед іншими модифікаторами імені. Наприклад, &#39;p&#39; для покажчиків.</li></ul><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">class PerimeterRectangle</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">public:</span></span>
<span class="line"><span style="color:#A6ACCD;">  int perimeter;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">private:</span></span>
<span class="line"><span style="color:#A6ACCD;">  int mLength;</span></span>
<span class="line"><span style="color:#A6ACCD;">  int mWidth;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="тип-2-імена-функціи-та-аргументів-функціи" tabindex="-1">Тип 2: імена функцій та аргументів функцій <a class="header-anchor" href="#тип-2-імена-функціи-та-аргументів-функціи" aria-label="Permalink to &quot;Тип 2: імена функцій та аргументів функцій&quot;">​</a></h2><p>Зазвичай кожна функція в C++ виконує одну або кілька дій, тому назва функції має чітко натякати на те, що вона робить. Ім&#39;я кожного методу/функції має починатися з дієслова.</p><p>Використовується та сама угода про імена, що й для імен класів.</p><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">int getValue();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">int SolveEquation();</span></span></code></pre></div><p>Перший символ імен аргументів функцій/методів має бути маленьким. Кожне слово також має починатися з великої літери.</p><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">int PerimeterRectangle(int lengthRectangle, int widthRectangle)</span></span></code></pre></div><h2 id="тип-3-змінні" tabindex="-1">Тип 3: Змінні <a class="header-anchor" href="#тип-3-змінні" aria-label="Permalink to &quot;Тип 3: Змінні&quot;">​</a></h2><p>Коли змінні оголошуються динамічно за допомогою ключового слова <strong>new</strong> або якщо змінні оголошуються як атрибути класу, то вони отримують пам&#39;ять з купи, а коли змінні створюються у програмі на C++, то пам&#39;ять виділяється зі стеку програми.</p><ul><li>Ім&#39;я змінної повинно починатися з літери.</li><li>Можна використовувати цифри, але тільки після літери.</li><li>В іменах змінних не можна використовувати жодних спеціальних символів, окрім символу підкреслення (&#39;_&#39;).</li><li>У назвах змінних не можна використовувати ключові слова.</li></ul><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">int total_cost;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">int length;</span></span></code></pre></div><p><strong>Змінні-покажчики</strong> слід починати з &#39;p&#39; і ставити зірочку &#39;*&#39; біля імені змінної замість типу покажчика.</p><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">int *pName;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">int *pAge, address;</span></span></code></pre></div><p><strong>Перед змінними-посиланнями</strong> слід ставити символ &#39;r&#39;. Це допомагає відрізнити метод, що повертає модифікований об&#39;єкт, від методу, що повертає немодифікований об&#39;єкт.</p><p><strong>Статичні змінні</strong> слід починати з &#39;s&#39;.</p><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">static int sCount;</span></span></code></pre></div><h2 id="тип-4-константа" tabindex="-1">Тип 4: Константа <a class="header-anchor" href="#тип-4-константа" aria-label="Permalink to &quot;Тип 4: Константа&quot;">​</a></h2><p>Глобальні константи повинні бути великими літерами, розділеними символом &#39;_&#39;.</p><div class="language-cxx"><button title="Copy Code" class="copy"></button><span class="lang">cxx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const double TWO_PI = 6.28318531;</span></span></code></pre></div><h2 id="тип-5-іменування-фаилів" tabindex="-1">Тип 5: Іменування файлів <a class="header-anchor" href="#тип-5-іменування-фаилів" aria-label="Permalink to &quot;Тип 5: Іменування файлів&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">helloworld.c      // Valid</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">hello_world.cpp    // Not Valid</span></span>
<span class="line"><span style="color:#A6ACCD;">hello-world.cpp    // Not Valid</span></span>
<span class="line"><span style="color:#A6ACCD;">hel-lo_world.cpp   // Not Valid</span></span>
<span class="line"><span style="color:#A6ACCD;">hello* world.cpp   // Not Valid</span></span>
<span class="line"><span style="color:#A6ACCD;">iostream.cpp       // Not Valid</span></span>
<span class="line"><span style="color:#A6ACCD;">hello123@world.cpp // Not Valid</span></span></code></pre></div>`,29),t=[p];function o(c,i,r,d,C,h){return n(),s("div",null,t)}const u=a(e,[["render",o]]);export{g as __pageData,u as default};
